// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.0--rc1
// source: morpho/service.proto

package morpho

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MorphoService_SupplyERC20_FullMethodName        = "/morpho.MorphoService/SupplyERC20"
	MorphoService_WithdrawERC20_FullMethodName      = "/morpho.MorphoService/WithdrawERC20"
	MorphoService_GetAPR_FullMethodName             = "/morpho.MorphoService/GetAPR"
	MorphoService_GetSuppliedBalance_FullMethodName = "/morpho.MorphoService/GetSuppliedBalance"
)

// MorphoServiceClient is the client API for MorphoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MorphoServiceClient interface {
	SupplyERC20(ctx context.Context, in *SupplyERC20Request, opts ...grpc.CallOption) (*SupplyERC20Response, error)
	WithdrawERC20(ctx context.Context, in *WithdrawERC20Request, opts ...grpc.CallOption) (*WithdrawERC20Response, error)
	GetAPR(ctx context.Context, in *GetAPRRequest, opts ...grpc.CallOption) (*GetAPRResponse, error)
	GetSuppliedBalance(ctx context.Context, in *SuppliedBalanceRequest, opts ...grpc.CallOption) (*SuppliedBalanceResponse, error)
}

type morphoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMorphoServiceClient(cc grpc.ClientConnInterface) MorphoServiceClient {
	return &morphoServiceClient{cc}
}

func (c *morphoServiceClient) SupplyERC20(ctx context.Context, in *SupplyERC20Request, opts ...grpc.CallOption) (*SupplyERC20Response, error) {
	out := new(SupplyERC20Response)
	err := c.cc.Invoke(ctx, MorphoService_SupplyERC20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *morphoServiceClient) WithdrawERC20(ctx context.Context, in *WithdrawERC20Request, opts ...grpc.CallOption) (*WithdrawERC20Response, error) {
	out := new(WithdrawERC20Response)
	err := c.cc.Invoke(ctx, MorphoService_WithdrawERC20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *morphoServiceClient) GetAPR(ctx context.Context, in *GetAPRRequest, opts ...grpc.CallOption) (*GetAPRResponse, error) {
	out := new(GetAPRResponse)
	err := c.cc.Invoke(ctx, MorphoService_GetAPR_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *morphoServiceClient) GetSuppliedBalance(ctx context.Context, in *SuppliedBalanceRequest, opts ...grpc.CallOption) (*SuppliedBalanceResponse, error) {
	out := new(SuppliedBalanceResponse)
	err := c.cc.Invoke(ctx, MorphoService_GetSuppliedBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MorphoServiceServer is the server API for MorphoService service.
// All implementations should embed UnimplementedMorphoServiceServer
// for forward compatibility
type MorphoServiceServer interface {
	SupplyERC20(context.Context, *SupplyERC20Request) (*SupplyERC20Response, error)
	WithdrawERC20(context.Context, *WithdrawERC20Request) (*WithdrawERC20Response, error)
	GetAPR(context.Context, *GetAPRRequest) (*GetAPRResponse, error)
	GetSuppliedBalance(context.Context, *SuppliedBalanceRequest) (*SuppliedBalanceResponse, error)
}

// UnimplementedMorphoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMorphoServiceServer struct {
}

func (UnimplementedMorphoServiceServer) SupplyERC20(context.Context, *SupplyERC20Request) (*SupplyERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplyERC20 not implemented")
}
func (UnimplementedMorphoServiceServer) WithdrawERC20(context.Context, *WithdrawERC20Request) (*WithdrawERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawERC20 not implemented")
}
func (UnimplementedMorphoServiceServer) GetAPR(context.Context, *GetAPRRequest) (*GetAPRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPR not implemented")
}
func (UnimplementedMorphoServiceServer) GetSuppliedBalance(context.Context, *SuppliedBalanceRequest) (*SuppliedBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuppliedBalance not implemented")
}

// UnsafeMorphoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MorphoServiceServer will
// result in compilation errors.
type UnsafeMorphoServiceServer interface {
	mustEmbedUnimplementedMorphoServiceServer()
}

func RegisterMorphoServiceServer(s grpc.ServiceRegistrar, srv MorphoServiceServer) {
	s.RegisterService(&MorphoService_ServiceDesc, srv)
}

func _MorphoService_SupplyERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplyERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MorphoServiceServer).SupplyERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MorphoService_SupplyERC20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MorphoServiceServer).SupplyERC20(ctx, req.(*SupplyERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MorphoService_WithdrawERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MorphoServiceServer).WithdrawERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MorphoService_WithdrawERC20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MorphoServiceServer).WithdrawERC20(ctx, req.(*WithdrawERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MorphoService_GetAPR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MorphoServiceServer).GetAPR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MorphoService_GetAPR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MorphoServiceServer).GetAPR(ctx, req.(*GetAPRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MorphoService_GetSuppliedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppliedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MorphoServiceServer).GetSuppliedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MorphoService_GetSuppliedBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MorphoServiceServer).GetSuppliedBalance(ctx, req.(*SuppliedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MorphoService_ServiceDesc is the grpc.ServiceDesc for MorphoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MorphoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "morpho.MorphoService",
	HandlerType: (*MorphoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SupplyERC20",
			Handler:    _MorphoService_SupplyERC20_Handler,
		},
		{
			MethodName: "WithdrawERC20",
			Handler:    _MorphoService_WithdrawERC20_Handler,
		},
		{
			MethodName: "GetAPR",
			Handler:    _MorphoService_GetAPR_Handler,
		},
		{
			MethodName: "GetSuppliedBalance",
			Handler:    _MorphoService_GetSuppliedBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "morpho/service.proto",
}
