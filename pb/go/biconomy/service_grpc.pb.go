// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.0--rc1
// source: biconomy/service.proto

package biconomy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BiconomyService_UsePermission_FullMethodName = "/biconomy.BiconomyService/UsePermission"
)

// BiconomyServiceClient is the client API for BiconomyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiconomyServiceClient interface {
	UsePermission(ctx context.Context, in *UsePermissionRequest, opts ...grpc.CallOption) (*UsePermissionResponse, error)
}

type biconomyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBiconomyServiceClient(cc grpc.ClientConnInterface) BiconomyServiceClient {
	return &biconomyServiceClient{cc}
}

func (c *biconomyServiceClient) UsePermission(ctx context.Context, in *UsePermissionRequest, opts ...grpc.CallOption) (*UsePermissionResponse, error) {
	out := new(UsePermissionResponse)
	err := c.cc.Invoke(ctx, BiconomyService_UsePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BiconomyServiceServer is the server API for BiconomyService service.
// All implementations should embed UnimplementedBiconomyServiceServer
// for forward compatibility
type BiconomyServiceServer interface {
	UsePermission(context.Context, *UsePermissionRequest) (*UsePermissionResponse, error)
}

// UnimplementedBiconomyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBiconomyServiceServer struct {
}

func (UnimplementedBiconomyServiceServer) UsePermission(context.Context, *UsePermissionRequest) (*UsePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsePermission not implemented")
}

// UnsafeBiconomyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiconomyServiceServer will
// result in compilation errors.
type UnsafeBiconomyServiceServer interface {
	mustEmbedUnimplementedBiconomyServiceServer()
}

func RegisterBiconomyServiceServer(s grpc.ServiceRegistrar, srv BiconomyServiceServer) {
	s.RegisterService(&BiconomyService_ServiceDesc, srv)
}

func _BiconomyService_UsePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiconomyServiceServer).UsePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BiconomyService_UsePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiconomyServiceServer).UsePermission(ctx, req.(*UsePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BiconomyService_ServiceDesc is the grpc.ServiceDesc for BiconomyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BiconomyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biconomy.BiconomyService",
	HandlerType: (*BiconomyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UsePermission",
			Handler:    _BiconomyService_UsePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "biconomy/service.proto",
}
