// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: protocol/models/protocol.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "protocol";

export interface GetInfoRequest {
  name: string;
}

export interface GetInfoResponseData {
  name: string;
  chain: string;
  token: string;
  price: number;
  tvl: number;
}

export interface GetInfoResponse {
  code: number;
  msg: string;
  data: GetInfoResponseData | undefined;
}

function createBaseGetInfoRequest(): GetInfoRequest {
  return { name: "" };
}

export const GetInfoRequest: MessageFns<GetInfoRequest> = {
  encode(message: GetInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInfoRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetInfoRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInfoRequest>, I>>(base?: I): GetInfoRequest {
    return GetInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInfoRequest>, I>>(object: I): GetInfoRequest {
    const message = createBaseGetInfoRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetInfoResponseData(): GetInfoResponseData {
  return { name: "", chain: "", token: "", price: 0, tvl: 0 };
}

export const GetInfoResponseData: MessageFns<GetInfoResponseData> = {
  encode(message: GetInfoResponseData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (message.token !== "") {
      writer.uint32(26).string(message.token);
    }
    if (message.price !== 0) {
      writer.uint32(33).double(message.price);
    }
    if (message.tvl !== 0) {
      writer.uint32(41).double(message.tvl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInfoResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInfoResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.tvl = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInfoResponseData {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      tvl: isSet(object.tvl) ? globalThis.Number(object.tvl) : 0,
    };
  },

  toJSON(message: GetInfoResponseData): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.tvl !== 0) {
      obj.tvl = message.tvl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInfoResponseData>, I>>(base?: I): GetInfoResponseData {
    return GetInfoResponseData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInfoResponseData>, I>>(object: I): GetInfoResponseData {
    const message = createBaseGetInfoResponseData();
    message.name = object.name ?? "";
    message.chain = object.chain ?? "";
    message.token = object.token ?? "";
    message.price = object.price ?? 0;
    message.tvl = object.tvl ?? 0;
    return message;
  },
};

function createBaseGetInfoResponse(): GetInfoResponse {
  return { code: 0, msg: "", data: undefined };
}

export const GetInfoResponse: MessageFns<GetInfoResponse> = {
  encode(message: GetInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int64(message.code);
    }
    if (message.msg !== "") {
      writer.uint32(18).string(message.msg);
    }
    if (message.data !== undefined) {
      GetInfoResponseData.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = GetInfoResponseData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInfoResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      data: isSet(object.data) ? GetInfoResponseData.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: GetInfoResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.data !== undefined) {
      obj.data = GetInfoResponseData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInfoResponse>, I>>(base?: I): GetInfoResponse {
    return GetInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInfoResponse>, I>>(object: I): GetInfoResponse {
    const message = createBaseGetInfoResponse();
    message.code = object.code ?? 0;
    message.msg = object.msg ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? GetInfoResponseData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
