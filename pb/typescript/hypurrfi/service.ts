// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: hypurrfi/service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { GetAPRRequest, GetAPRResponse } from "./models/getAPR";
import { GetLendingPoolRequest, GetLendingPoolResponse } from "./models/getLendingPool";
import { SupplyERC20Request, SupplyERC20Response } from "./models/supplyErc20";
import { WithdrawERC20Request, WithdrawERC20Response } from "./models/withdrawErc20";

export const protobufPackage = "hypurrfi";

export const HYPURRFI_PACKAGE_NAME = "hypurrfi";

export interface HypurrfiServiceClient {
  supplyErc20(request: SupplyERC20Request): Observable<SupplyERC20Response>;

  withdrawErc20(request: WithdrawERC20Request): Observable<WithdrawERC20Response>;

  getApr(request: GetAPRRequest): Observable<GetAPRResponse>;

  getLendingPool(request: GetLendingPoolRequest): Observable<GetLendingPoolResponse>;
}

export interface HypurrfiServiceController {
  supplyErc20(
    request: SupplyERC20Request,
  ): Promise<SupplyERC20Response> | Observable<SupplyERC20Response> | SupplyERC20Response;

  withdrawErc20(
    request: WithdrawERC20Request,
  ): Promise<WithdrawERC20Response> | Observable<WithdrawERC20Response> | WithdrawERC20Response;

  getApr(request: GetAPRRequest): Promise<GetAPRResponse> | Observable<GetAPRResponse> | GetAPRResponse;

  getLendingPool(
    request: GetLendingPoolRequest,
  ): Promise<GetLendingPoolResponse> | Observable<GetLendingPoolResponse> | GetLendingPoolResponse;
}

export function HypurrfiServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["supplyErc20", "withdrawErc20", "getApr", "getLendingPool"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("HypurrfiService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("HypurrfiService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const HYPURRFI_SERVICE_NAME = "HypurrfiService";
