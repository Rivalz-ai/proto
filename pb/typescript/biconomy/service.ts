// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: biconomy/service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { UsePermissionRequest, UsePermissionResponse } from "./models/usePermission";

export const protobufPackage = "biconomy";

export const BICONOMY_PACKAGE_NAME = "biconomy";

export interface BiconomyServiceClient {
  usePermission(request: UsePermissionRequest): Observable<UsePermissionResponse>;
}

export interface BiconomyServiceController {
  usePermission(
    request: UsePermissionRequest,
  ): Promise<UsePermissionResponse> | Observable<UsePermissionResponse> | UsePermissionResponse;
}

export function BiconomyServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["usePermission"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BiconomyService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BiconomyService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BICONOMY_SERVICE_NAME = "BiconomyService";
