// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: price/models/price.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "price";
function createBasePriceRequest() {
    return { source: "", token: "" };
}
export const PriceRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.source !== "") {
            writer.uint32(10).string(message.source);
        }
        if (message.token !== "") {
            writer.uint32(18).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePriceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            source: isSet(object.source) ? globalThis.String(object.source) : "",
            token: isSet(object.token) ? globalThis.String(object.token) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.source !== "") {
            obj.source = message.source;
        }
        if (message.token !== "") {
            obj.token = message.token;
        }
        return obj;
    },
    create(base) {
        return PriceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePriceRequest();
        message.source = object.source ?? "";
        message.token = object.token ?? "";
        return message;
    },
};
function createBasePriceResponseData() {
    return { price: 0 };
}
export const PriceResponseData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.price !== 0) {
            writer.uint32(9).double(message.price);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePriceResponseData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.price = reader.double();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { price: isSet(object.price) ? globalThis.Number(object.price) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.price !== 0) {
            obj.price = message.price;
        }
        return obj;
    },
    create(base) {
        return PriceResponseData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePriceResponseData();
        message.price = object.price ?? 0;
        return message;
    },
};
function createBaseSignInResponse() {
    return { code: 0, msg: "", data: undefined };
}
export const SignInResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int64(message.code);
        }
        if (message.msg !== "") {
            writer.uint32(18).string(message.msg);
        }
        if (message.data !== undefined) {
            PriceResponseData.encode(message.data, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSignInResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = longToNumber(reader.int64());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.msg = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.data = PriceResponseData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
            data: isSet(object.data) ? PriceResponseData.fromJSON(object.data) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.msg !== "") {
            obj.msg = message.msg;
        }
        if (message.data !== undefined) {
            obj.data = PriceResponseData.toJSON(message.data);
        }
        return obj;
    },
    create(base) {
        return SignInResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSignInResponse();
        message.code = object.code ?? 0;
        message.msg = object.msg ?? "";
        message.data = (object.data !== undefined && object.data !== null)
            ? PriceResponseData.fromPartial(object.data)
            : undefined;
        return message;
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
